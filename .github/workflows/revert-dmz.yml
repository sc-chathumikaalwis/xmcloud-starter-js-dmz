name: Revert DMZ Branch

on:
  workflow_dispatch:
    inputs:
      commit_sha:
        description: 'Commit SHA to revert (required)'
        required: true
        type: string
      reason:
        description: 'Reason for reverting'
        required: true
        type: string
        default: 'Build failure or critical issue'

env:
  NODE_VERSION: '22.11.0'

jobs:
  revert-dmz:
    name: Revert DMZ Branch
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Determine commit to revert
        id: determine-commit
        run: |
          COMMIT_TO_REVERT="${{ github.event.inputs.commit_sha }}"
          echo "Using specified commit: $COMMIT_TO_REVERT"
          
          # Verify commit exists
          if ! git cat-file -e "$COMMIT_TO_REVERT^{commit}" 2>/dev/null; then
            echo "❌ Commit $COMMIT_TO_REVERT does not exist"
            exit 1
          fi
          
          echo "commit-to-revert=$COMMIT_TO_REVERT" >> $GITHUB_OUTPUT
          
          # Get commit info
          COMMIT_MESSAGE=$(git log --format=%s -n 1 "$COMMIT_TO_REVERT")
          COMMIT_AUTHOR=$(git log --format=%an -n 1 "$COMMIT_TO_REVERT")
          COMMIT_DATE=$(git log --format=%ad -n 1 "$COMMIT_TO_REVERT")
          
          echo "commit-message=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT
          echo "commit-author=$COMMIT_AUTHOR" >> $GITHUB_OUTPUT
          echo "commit-date=$COMMIT_DATE" >> $GITHUB_OUTPUT

      - name: Create revert commit
        run: |
          echo "Creating revert commit..."
          
          # Switch to dmz branch
          git checkout dmz
          git pull origin dmz
          
          # Create revert commit
          git revert --no-edit "${{ steps.determine-commit.outputs.commit-to-revert }}"
          
          # Push the revert commit
          git push origin dmz
          
          echo "✅ Successfully reverted commit ${{ steps.determine-commit.outputs.commit-to-revert }}"

      - name: Create issue for tracking
        uses: actions/github-script@v7
        with:
          script: |
            const issueBody = `## 🔄 DMZ Branch Revert
            
            **Reverted Commit:** \`${{ steps.determine-commit.outputs.commit-to-revert }}\`
            **Original Message:** ${{ steps.determine-commit.outputs.commit-message }}
            **Original Author:** ${{ steps.determine-commit.outputs.commit-author }}
            **Original Date:** ${{ steps.determine-commit.outputs.commit-date }}
            
            **Reason for Revert:** ${{ github.event.inputs.reason }}
            
            **Action Taken:**
            - ✅ Commit has been reverted from dmz branch
            - ✅ Revert commit has been pushed to dmz
            - ✅ DMZ validation will run automatically
            
            **Next Steps:**
            1. Investigate the root cause of the issue
            2. Create a new PR with the fix
            3. Ensure the fix passes all validation checks
            4. Close this issue once the fix is merged
            
            **Related Workflow:** [DMZ Revert Workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ---
            *This issue was automatically created by the DMZ revert workflow*`;
            
            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🔄 DMZ Revert: ${{ steps.determine-commit.outputs.commit-message }}`,
              body: issueBody,
              labels: ['revert', 'dmz', 'automated']
            });
            
            console.log(`Created issue #${issue.number}: ${issue.title}`);

      - name: Comment on recent PRs
        uses: actions/github-script@v7
        with:
          script: |
            // Find recent PRs that might be related to the reverted commit
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              sort: 'updated',
              direction: 'desc',
              per_page: 10
            });
            
            const revertedCommit = '${{ steps.determine-commit.outputs.commit-to-revert }}';
            
            for (const pr of prs) {
              // Check if this PR contains the reverted commit
              const { data: commits } = await github.rest.pulls.listCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number
              });
              
              const hasRevertedCommit = commits.some(commit => commit.sha === revertedCommit);
              
              if (hasRevertedCommit) {
                const commentBody = `## 🔄 Related Commit Reverted
                
                A commit from this PR has been reverted from the dmz branch:
                
                **Reverted Commit:** \`${revertedCommit}\`
                **Reason:** ${{ github.event.inputs.reason }}
                
                **Next Steps:**
                - Review the revert reason
                - Create a new PR with the fix if needed
                - Ensure the fix passes all validation checks
                
                **Revert Details:** [View Issue](${context.payload.issue?.html_url || 'N/A'})`;
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  body: commentBody
                });
                
                console.log(`Commented on PR #${pr.number}`);
                break; // Only comment on the most recent relevant PR
              }
            }

      - name: Create summary
        run: |
          echo "## 🔄 DMZ Branch Revert Completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Reverted Commit:** \`${{ steps.determine-commit.outputs.commit-to-revert }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Original Message:** ${{ steps.determine-commit.outputs.commit-message }}" >> $GITHUB_STEP_SUMMARY
          echo "**Original Author:** ${{ steps.determine-commit.outputs.commit-author }}" >> $GITHUB_STEP_SUMMARY
          echo "**Reason:** ${{ github.event.inputs.reason }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Actions Taken:**" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Commit reverted from dmz branch" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Revert commit pushed to dmz" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Tracking issue created" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Related PRs notified" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "1. DMZ validation will run automatically" >> $GITHUB_STEP_SUMMARY
          echo "2. Investigate the root cause" >> $GITHUB_STEP_SUMMARY
          echo "3. Create a new PR with the fix" >> $GITHUB_STEP_SUMMARY
          echo "4. Ensure the fix passes all validation checks" >> $GITHUB_STEP_SUMMARY




