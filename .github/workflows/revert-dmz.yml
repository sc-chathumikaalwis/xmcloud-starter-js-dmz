name: Rebase DMZ Branch

on:
  workflow_dispatch:
    inputs:
      commit_sha:
        description: 'Commit SHA to revert (required)'
        required: true
        type: string
      reason:
        description: 'Reason for removing commit'
        required: true
        type: string
        default: 'Build failure or critical issue'

env:
  NODE_VERSION: '22.11.0'

jobs:
  rebase-dmz:
    name: Rebase DMZ Branch
    runs-on: ubuntu-latest
    # Use GitHub Environment for secure authorization
    # This CANNOT be bypassed without proper GitHub permissions
    environment:
      name: dmz-revert
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    permissions:
      contents: write
      pull-requests: write
      issues: write
    
    steps:
      - name: Log authorization
        run: |
          # This user has been authorized via GitHub Environment protection rules
          echo "🔐 Workflow triggered by: ${{ github.actor }}"
          echo "✅ User authorized via GitHub Environment protection"
          echo "📋 Environment: dmz-revert"
      
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Validate and prepare commit
        id: determine-commit
        run: |
          COMMIT_TO_REVERT="${{ github.event.inputs.commit_sha }}"
          echo "🔍 Validating commit: $COMMIT_TO_REVERT"
          
          # Verify commit exists and is a valid commit
          if ! git cat-file -e "$COMMIT_TO_REMOVE^{commit}" 2>/dev/null; then
            echo "❌ ERROR: Commit $COMMIT_TO_REMOVE does not exist or is not a valid commit"
            echo ""
            echo "Please provide a valid commit SHA from the dmz branch."
            echo "You can find commit SHAs by running: git log origin/dmz"
            exit 1
          fi
          
          echo "✅ Commit $COMMIT_TO_REVERT is valid"
          echo "commit-to-revert=$COMMIT_TO_REVERT" >> $GITHUB_OUTPUT
          
          # Get commit info
          COMMIT_MESSAGE=$(git log --format=%s -n 1 "$COMMIT_TO_REMOVE")
          COMMIT_AUTHOR=$(git log --format=%an -n 1 "$COMMIT_TO_REMOVE")
          COMMIT_DATE=$(git log --format=%ad -n 1 "$COMMIT_TO_REMOVE")
          
          echo "📝 Commit details:"
          echo "  Message: $COMMIT_MESSAGE"
          echo "  Author: $COMMIT_AUTHOR"
          echo "  Date: $COMMIT_DATE"
          
          echo "commit-message=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT
          echo "commit-author=$COMMIT_AUTHOR" >> $GITHUB_OUTPUT
          echo "commit-date=$COMMIT_DATE" >> $GITHUB_OUTPUT

      - name: Rebase out problematic commit
        run: |
          echo "Rebasing out commit from dmz branch..."
          
          COMMIT_TO_REMOVE="${{ steps.determine-commit.outputs.commit-to-remove }}"
          
          # Check if the commit to remove includes workflow files
          WORKFLOW_FILES=$(git diff-tree --no-commit-id --name-only -r "$COMMIT_TO_REMOVE" | grep -E '^\.github/workflows/' || true)
          
          if [ -n "$WORKFLOW_FILES" ]; then
            echo "ℹ️ This commit includes workflow files:"
            echo "$WORKFLOW_FILES"
            echo "Rebase will cleanly remove these from history."
          fi
          
          # Check if this is a merge commit
          if git rev-parse "$COMMIT_TO_REMOVE^2" >/dev/null 2>&1; then
            echo "⚠️ Warning: Merge commit detected"
            echo "This will remove the entire merge and its changes."
          fi
          
          # Get the parent commit (commit before the one to remove)
          PARENT_COMMIT=$(git rev-parse "$COMMIT_TO_REMOVE^")
          
          # Check if this is the HEAD commit
          if [ "$COMMIT_TO_REMOVE" = "$(git rev-parse HEAD)" ]; then
            echo "ℹ️ Removing HEAD commit, resetting to parent"
            git reset --hard "$PARENT_COMMIT"
          else
            echo "ℹ️ Removing commit from history using interactive rebase"
            # Use git rebase to drop the specific commit
            # We rebase from parent of the commit to remove, dropping that commit
            GIT_SEQUENCE_EDITOR="sed -i '/^pick $COMMIT_TO_REMOVE/d'" git rebase -i "$PARENT_COMMIT"
          fi
          
          # Force push with lease for safety
          if git push origin dmz --force-with-lease; then
            echo "✅ Successfully rebased out commit $COMMIT_TO_REMOVE"
            echo "ℹ️ History has been rewritten - commit removed from dmz"
          else
            echo "❌ Failed to push rebased branch"
            echo "This may be due to:"
            echo "  - Branch protection rules preventing force-push"
            echo "  - Another push occurred during rebase (--force-with-lease rejected)"
            echo "  - Insufficient permissions"
            exit 1
          fi

      - name: Create issue for tracking
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            const issueBody = `## 🔄 DMZ Branch Rebase
            
            **Authorized By:** @${{ github.actor }} (via GitHub Environment: \`dmz-revert\`)
            **Removed Commit:** \`${{ steps.determine-commit.outputs.commit-to-remove }}\`
            **Original Message:** ${{ steps.determine-commit.outputs.commit-message }}
            **Original Author:** ${{ steps.determine-commit.outputs.commit-author }}
            **Original Date:** ${{ steps.determine-commit.outputs.commit-date }}
            
            **Reason for Removal:** ${{ github.event.inputs.reason }}
            
            **Security:**
            - 🔒 Authorization via GitHub Environment protection rules
            - 🔒 Cannot be bypassed by modifying workflow files
            
            **Action Taken:**
            - ✅ Authorization verified by GitHub
            - ✅ Commit validated
            - ✅ Commit has been rebased out of dmz branch
            - ✅ History has been rewritten (commit removed)
            - ✅ Force-pushed to dmz with --force-with-lease
            - ✅ DMZ validation will run automatically
            
            **Next Steps:**
            1. Investigate the root cause of the issue
            2. Create a new PR with the fix
            3. Ensure the fix passes all validation checks
            4. Close this issue once the fix is merged
            
            **Related Workflow:** [DMZ Rebase Workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ---
            *This issue was automatically created by the DMZ rebase workflow*`;
            
            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🔄 DMZ Rebase: ${{ steps.determine-commit.outputs.commit-message }}`,
              body: issueBody,
              labels: ['rebase', 'dmz', 'automated']
            });
            
            console.log(`Created issue #${issue.number}: ${issue.title}`);

      - name: Comment on recent PRs
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            // Find recent PRs that might be related to the removed commit
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              sort: 'updated',
              direction: 'desc',
              per_page: 10
            });
            
            const removedCommit = '${{ steps.determine-commit.outputs.commit-to-remove }}';
            
            for (const pr of prs) {
              // Check if this PR contains the removed commit
              const { data: commits } = await github.rest.pulls.listCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number
              });
              
              const hasRemovedCommit = commits.some(commit => commit.sha === removedCommit);
              
              if (hasRemovedCommit) {
                const commentBody = `## 🔄 Related Commit Removed via Rebase
                
                A commit from this PR has been rebased out of the dmz branch:
                
                **Removed Commit:** \`${removedCommit}\`
                **Reason:** ${{ github.event.inputs.reason }}
                **Action:** History rewritten - commit no longer exists in dmz
                
                **Next Steps:**
                - Review the removal reason
                - Create a new PR with the fix if needed
                - Ensure the fix passes all validation checks
                
                **Rebase Details:** [View Issue](${context.payload.issue?.html_url || 'N/A'})`;
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  body: commentBody
                });
                
                console.log(`Commented on PR #${pr.number}`);
                break; // Only comment on the most recent relevant PR
              }
            }

      - name: Create summary
        run: |
          echo "## 🔄 DMZ Branch Rebase Completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Authorized By:** @${{ github.actor }} (via GitHub Environment: dmz-revert)" >> $GITHUB_STEP_SUMMARY
          echo "**Removed Commit:** \`${{ steps.determine-commit.outputs.commit-to-remove }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Original Message:** ${{ steps.determine-commit.outputs.commit-message }}" >> $GITHUB_STEP_SUMMARY
          echo "**Original Author:** ${{ steps.determine-commit.outputs.commit-author }}" >> $GITHUB_STEP_SUMMARY
          echo "**Reason:** ${{ github.event.inputs.reason }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Security:**" >> $GITHUB_STEP_SUMMARY
          echo "- 🔒 Authorization via GitHub Environment protection rules" >> $GITHUB_STEP_SUMMARY
          echo "- 🔒 Cannot be bypassed by modifying workflow files" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Actions Taken:**" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Authorization verified by GitHub" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Commit validated" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Commit reverted from dmz branch" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Revert commit pushed to dmz" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Tracking issue created" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Related PRs notified" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "1. DMZ validation will run automatically" >> $GITHUB_STEP_SUMMARY
          echo "2. Investigate the root cause" >> $GITHUB_STEP_SUMMARY
          echo "3. Create a new PR with the fix" >> $GITHUB_STEP_SUMMARY
          echo "4. Ensure the fix passes all validation checks" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ **Note:** History has been rewritten. Developers working on branches based on dmz may need to rebase their work." >> $GITHUB_STEP_SUMMARY




