name: PR Validation for DMZ Branch

on:
  pull_request:
    branches: [dmz]
  pull_request_target:
    branches: [dmz]

env:
  NODE_VERSION: '22.11.0'

jobs:
  pr-validation:
    name: Validate Pull Request
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Detect changed starters
        id: detect-changes
        run: |
          echo "Detecting changed starter applications..."
          
          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only origin/dmz...HEAD)
          echo "Changed files: $CHANGED_FILES"
          
          # Detect which starters have changes
          CHANGED_STARTERS=""
          
          if echo "$CHANGED_FILES" | grep -q "^examples/kit-nextjs-skate-park/"; then
            CHANGED_STARTERS="$CHANGED_STARTERS kit-nextjs-skate-park"
          fi
          
          if echo "$CHANGED_FILES" | grep -q "^examples/kit-nextjs-article-starter/"; then
            CHANGED_STARTERS="$CHANGED_STARTERS kit-nextjs-article-starter"
          fi
          
          if echo "$CHANGED_FILES" | grep -q "^examples/kit-nextjs-location-finder/"; then
            CHANGED_STARTERS="$CHANGED_STARTERS kit-nextjs-location-finder"
          fi
          
          if echo "$CHANGED_FILES" | grep -q "^examples/kit-nextjs-product-listing/"; then
            CHANGED_STARTERS="$CHANGED_STARTERS kit-nextjs-product-listing"
          fi
          
          # If no specific starter changes detected, check for global changes
          if [ -z "$CHANGED_STARTERS" ]; then
            if echo "$CHANGED_FILES" | grep -q "^xmcloud.build.json\|^\.github/\|^README.md\|^CONTRIBUTING.md"; then
              echo "Global changes detected, validating all starters"
              CHANGED_STARTERS="kit-nextjs-skate-park kit-nextjs-article-starter kit-nextjs-location-finder kit-nextjs-product-listing"
            fi
          fi
          
          echo "Changed starters: $CHANGED_STARTERS"
          echo "changed-starters=$CHANGED_STARTERS" >> $GITHUB_OUTPUT

      - name: Install dependencies for changed starters
        run: |
          echo "Installing dependencies for changed starters..."
          
          for starter in ${{ steps.detect-changes.outputs.changed-starters }}; do
            if [ -d "examples/$starter" ]; then
              echo "Installing dependencies for $starter..."
              cd "examples/$starter"
              npm install
              cd ../..
            fi
          done

      - name: Lint and format check
        run: |
          echo "Running linting and formatting checks..."
          
          for starter in ${{ steps.detect-changes.outputs.changed-starters }}; do
            if [ -d "examples/$starter" ]; then
              echo "Checking $starter..."
              cd "examples/$starter"
              
              # Run linting
              if npm run lint 2>/dev/null; then
                echo "✅ Linting passed for $starter"
              else
                echo "❌ Linting failed for $starter"
                exit 1
              fi
              
              # Check formatting
              if npm run format:check 2>/dev/null; then
                echo "✅ Formatting check passed for $starter"
              else
                echo "❌ Formatting check failed for $starter"
                echo "Run 'npm run prettier' to fix formatting issues"
                exit 1
              fi
              
              cd ../..
            fi
          done

      - name: Type checking
        run: |
          echo "Running TypeScript type checking..."
          
          for starter in ${{ steps.detect-changes.outputs.changed-starters }}; do
            if [ -d "examples/$starter" ]; then
              echo "Type checking $starter..."
              cd "examples/$starter"
              
              # Generate Sitecore files first (needed for type checking)
              echo "Generating Sitecore configuration files..."
              
              # Try to generate files with Sitecore tools, fallback to minimal files if credentials are missing
              if npm run sitecore-tools:generate-map 2>/dev/null; then
                echo "✅ Sitecore files generated successfully"
              else
                echo "⚠️ Sitecore tools failed (likely missing credentials), creating minimal files for type checking"
                
                # Create minimal .sitecore directory and files
                mkdir -p .sitecore
                
                # Create minimal sites.json
                echo '[{"name":"basic","hostName":"*","language":"en"}]' > .sitecore/sites.json
                
                # Create minimal metadata.json
                echo '{"packages":{"@sitecore-content-sdk/core":"1.1.0","@sitecore-content-sdk/nextjs":"1.1.0"}}' > .sitecore/metadata.json
                
                # Create minimal component-map.ts
                echo 'export default new Map();' > .sitecore/component-map.ts
                
                # Create minimal import-map.ts
                echo 'export default [];' > .sitecore/import-map.ts
                
                echo "✅ Minimal Sitecore files created for type checking"
              fi
              
              if npm run type-check 2>/dev/null; then
                echo "✅ Type checking passed for $starter"
              else
                echo "❌ Type checking failed for $starter"
                exit 1
              fi
              
              cd ../..
            fi
          done

      - name: Build changed starters
        env:
          # Sitecore Edge API Configuration
          SITECORE_EDGE_URL: ${{ secrets.SITECORE_EDGE_URL }}
          SITECORE_EDGE_CONTEXT_ID: ${{ secrets.SITECORE_EDGE_CONTEXT_ID }}
          NEXT_PUBLIC_SITECORE_EDGE_CONTEXT_ID: ${{ secrets.NEXT_PUBLIC_SITECORE_EDGE_CONTEXT_ID }}
          
          # Sitecore Configuration
          NEXT_PUBLIC_DEFAULT_SITE_NAME: ${{ vars.NEXT_PUBLIC_DEFAULT_SITE_NAME || 'basic' }}
          SITECORE_EDITING_SECRET: ${{ secrets.SITECORE_EDITING_SECRET }}
          
          # Additional Sitecore Environment Variables
          NEXT_PUBLIC_SITECORE_EDGE_URL: ${{ secrets.SITECORE_EDGE_URL }}
          NEXT_PUBLIC_SITECORE_API_KEY: ${{ secrets.NEXT_PUBLIC_SITECORE_API_KEY }}
          NEXT_PUBLIC_SITECORE_API_HOST: ${{ secrets.NEXT_PUBLIC_SITECORE_API_HOST }}
          NEXT_PUBLIC_DEFAULT_LANGUAGE: ${{ vars.NEXT_PUBLIC_DEFAULT_LANGUAGE || 'en' }}
          NEXT_PUBLIC_PERSONALIZE_SCOPE: ${{ vars.NEXT_PUBLIC_PERSONALIZE_SCOPE }}
          PERSONALIZE_MIDDLEWARE_EDGE_TIMEOUT: ${{ vars.PERSONALIZE_MIDDLEWARE_EDGE_TIMEOUT || '1000' }}
        run: |
          echo "Building changed starters..."
          echo "Sitecore Environment Variables:"
          echo "  SITECORE_EDGE_URL: ${SITECORE_EDGE_URL:+[SET]}"
          echo "  SITECORE_EDGE_CONTEXT_ID: ${SITECORE_EDGE_CONTEXT_ID:+[SET]}"
          echo "  NEXT_PUBLIC_SITECORE_EDGE_CONTEXT_ID: ${NEXT_PUBLIC_SITECORE_EDGE_CONTEXT_ID:+[SET]}"
          echo "  NEXT_PUBLIC_DEFAULT_SITE_NAME: ${NEXT_PUBLIC_DEFAULT_SITE_NAME}"
          echo "  SITECORE_EDITING_SECRET: ${SITECORE_EDITING_SECRET:+[SET]}"
          
          for starter in ${{ steps.detect-changes.outputs.changed-starters }}; do
            if [ -d "examples/$starter" ]; then
              echo "Building $starter..."
              cd "examples/$starter"
              
              if npm run build; then
                echo "✅ Build successful for $starter"
              else
                echo "❌ Build failed for $starter"
                exit 1
              fi
              
              cd ../..
            fi
          done

      - name: Run tests for changed starters
        run: |
          echo "Running tests for changed starters..."
          
          for starter in ${{ steps.detect-changes.outputs.changed-starters }}; do
            if [ -d "examples/$starter" ]; then
              echo "Testing $starter..."
              cd "examples/$starter"
              
              # Check if test script exists, if not fail the workflow
              if grep -q '"test"' package.json; then
                if npm test; then
                  echo "✅ Tests passed for $starter"
                else
                  echo "❌ Tests failed for $starter"
                  exit 1
                fi
              else
                echo "❌ No test script found for $starter - tests are mandatory"
                exit 1
              fi
              
              cd ../..
            fi
          done

      - name: Comment PR with results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## 🔍 PR Validation Results')
            );
            
            const status = '${{ job.status }}' === 'success' ? '✅ **PASSED**' : '❌ **FAILED**';
            const emoji = '${{ job.status }}' === 'success' ? '✅' : '❌';
            
            const body = `## 🔍 PR Validation Results
            
            ${emoji} **Status:** ${status}
            
            **Validated Starters:** ${{ steps.detect-changes.outputs.changed-starters }}
            
            **Checks Performed:**
            - ✅ Linting and formatting
            - ✅ TypeScript type checking  
            - ✅ Build verification
            - ✅ Test execution
            
            **Next Steps:**
            ${'${{ job.status }}' === 'success' ? 
              '- ✅ PR is ready for review and merge to dmz branch' : 
              '- ❌ Please fix the issues above before merging\n- Run `npm run prettier` to fix formatting issues\n- Check the build logs for specific errors'
            }
            
            ---
            *This comment will be updated on each validation run*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }




